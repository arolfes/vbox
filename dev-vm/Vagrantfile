# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# default settings - don't change these directly, use local settings instead (see below)
settings = {
}

# load local settings from file (only if present)
##################################################
# e.g. to change the ram setting, create a file named 'localsettings.rb' with the following contents:
#
# settings[:ram] = 4096
#
# Note: if you change RAM or CPUs, you need to restart the VMs (vagrant reload)
#
local_settings_file = File.join(File.absolute_path(File.dirname(__FILE__)), 'localsettings.rb')
if File.exists?(local_settings_file)
  puts "loading settings from #{local_settings_file}"
  eval(File.open(local_settings_file).read)
else
  puts "not loading local settings, since file not present: #{local_settings_file}"
end


### check path of seperate disk (survives vagrant destroy) ###
unless settings[:diskPath]
  puts 'define "diskPath" as a virtual disk path in settings'
  exit 1
end

### check local (unix) username ###
unless settings[:username]
  puts 'define "username" in settings'
  exit 1
end


Vagrant.configure('2') do |config|
  ENV['LC_ALL']="en_US.UTF-8"

  config.vm.box = "nt-base-box-fedora-32"
  


  config.vbguest.auto_update = true


   # vagrant plugin: vagrant-persistent-storage
  config.persistent_storage.enabled = true
  config.persistent_storage.location = settings[:diskPath]
  config.persistent_storage.size = 80000
  config.persistent_storage.mountname = "workspace"
  config.persistent_storage.filesystem = 'ext4'
  config.persistent_storage.mountpoint = '/workspace'
  config.persistent_storage.use_lvm = false

  config.vm.provider "virtualbox" do |vb|
    vb.gui = true
    vb.name = "dev-vm-fedora-#{settings[:username]}"
    vb.memory = 16384
    vb.cpus = 5

# doc config params
# https://www.virtualbox.org/manual/ch08.html

    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    vb.customize ["modifyvm", :id, "--draganddrop", "disabled"]

    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--vram", "256"]
    # Enabling the I/O APIC is required for 64-bit guest operating systems, especially Windows Vista;
    # it is also required if you want to use more than one virtual CPU in a VM.
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--apic", "on"]
    # Enable the use of hardware virtualization extensions (Intel VT-x or AMD-V) in the processor of your host system
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
    # Enable, if Guest Additions are installed, whether hardware 3D acceleration should be available
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]

    vb.customize ["modifyvm", :id, "--pae", "on"]
    vb.customize ["modifyvm", :id, "--longmode", "on"]

    vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
    vb.customize ["modifyvm", :id, "--largepages", "on"]
    vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
    vb.customize ["modifyvm", :id, "--vtxux", "on"]
    vb.customize ["modifyvm", :id, "--spec-ctrl", "on"]
    vb.customize ["modifyvm", :id, "--hpet", "on"]
  end

  if File.directory?(File.expand_path("~/.subversion"))
    config.vm.provision "file", source: "~/.subversion", destination: "/vagrant/#{settings[:username]}/.subversion"
  end

  if  settings[:git_user_name].nil?
    settings[:git_user_name] = "#{ENV['USERNAME']}"
    puts "* settings[:git_user_name] is now defined value=#{settings[:git_user_name]}"
  end

  if  settings[:sharedFolder_Windows]
    puts "* settings[:sharedFolder_Windows] is defined value=#{settings[:sharedFolder_Windows]}"
    if settings[:sharedFolder_MountPoint]
      puts "* settings[:sharedFolder_MountPoint] is defined value=#{settings[:sharedFolder_MountPoint]}"
      puts "Mounting folder"
      config.vm.synced_folder "#{settings[:sharedFolder_Windows]}", "#{settings[:sharedFolder_MountPoint]}"
    else
      puts "* settings[:sharedFolder_MountPoint] is NOT defined."
    end
  else
    puts "* settings[:sharedFolder_Windows] is NOT defined."
  end

  config.vm.provision 'preemptively give others write access to /etc/ansible/roles', type: :shell, inline: <<~'EOM'
    mkdir /etc/ansible/roles -p
    chmod o+w /etc/ansible/roles
  EOM
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "/vagrant/playbook.yml"
    ansible.galaxy_role_file = "/vagrant/galaxy_roles.yml"
    ansible.galaxy_roles_path = '/etc/ansible/roles'
    ansible.verbose = false
    ansible.compatibility_mode = "2.0"
    ansible.extra_vars = {
        username: "#{settings[:username]}",
        hostUsername: "#{ENV['USERNAME']}",
        gitusername: "#{settings[:git_user_name]}",
        gitemail: "#{settings[:git_user_email]}",
    }

  end


end
